//+optional-semicolons

/*

    This program showcases the classic "rotating colored triangle" example.
    Since the WebGL 2 package is for low-level bindings to WebGL, there is
    a lot of code here. In practice, you will want to use or make a wrapper
    around this logic to not burden yourself with all of these details.

*/

#load "./../webgl2"

use core.js
use core.random
use core.math
use webgl2 {
    gl :: package,
    GLenum,
    GLint,
    GLuint,
    GLShader,
    GLProgram,
    GLUniformLocation
}

shader: GLProgram
triangle_mesh: GLint
rotation_location: GLUniformLocation

main :: () {
    logf(.Info, "Initializing")
    js.setup_default_pool()

    glContext := create_context()
    gl.init(glContext)

    shader = create_shader()?
    triangle_mesh = create_triangle_mesh()
    rotation_location = gl.getUniformLocation(shader, "u_rot")

    js.Value.Global->set("ONYX", js.Value.Onyx)
    js.Value.Global->call("requestAnimationFrame", loop)
}

create_context :: () -> js.Value {
    doc    := js.Value.Global->get("document")
    canvas := doc->call("createElement", "canvas")
    canvas->set("width", js.Value.Global->get("innerWidth"))
    canvas->set("height", js.Value.Global->get("innerHeight"))

    doc->get("body")->call("append", canvas)

    glContext := canvas->call("getContext", "webgl2")
    return glContext
}

create_shader :: () -> ? GLProgram {
    vertex_shader   := compile_shader(gl.VERTEX_SHADER, VERTEX_SOURCE)?
    fragment_shader := compile_shader(gl.FRAGMENT_SHADER, FRAGMENT_SOURCE)?

    program := gl.createProgram()
    gl.attachShader(program, vertex_shader)
    gl.attachShader(program, fragment_shader)
    gl.linkProgram(program)

    if gl.getProgramParameter(program, gl.LINK_STATUS) == 0 {
        logf(.Error, "Failed to link program.")
        js.Value.Global->get("console")->call("log", gl.getProgramInfoLog(program))
        return .None
    }

    return program
}

compile_shader :: (type: GLenum, source: str) -> ? GLShader {
    shader := gl.createShader(type)

    gl.shaderSource(shader, source)
    gl.compileShader(shader)

    if gl.getShaderParameter(shader, gl.COMPILE_STATUS) == 0 {
        logf(.Error, "Failed to compile shader.")
        js.Value.Global->get("console")->call("log", gl.getShaderInfoLog(shader))
        return .None
    }

    return shader
}

Vec2  :: [2] f32
Color :: [4] f32

create_triangle_mesh :: () -> GLuint {
    triangle_data := Vec2.[
        .[ 0, 0.75 ],
        .[ -0.5, -0.25 ],
        .[ 0.5, -0.25 ]
    ]

    color_data := Color.[
        .[ 1, 0, 0, 1 ],
        .[ 0, 1, 0, 1 ],
        .[ 0, 0, 1, 1 ],
    ]

    // Create VBO for verticies
    vertex_buf := gl.createBuffer()
    gl.bindBuffer(gl.ARRAY_BUFFER, vertex_buf)
    gl.bufferData(gl.ARRAY_BUFFER, to_byte_array(triangle_data), gl.STATIC_DRAW)

    color_buf := gl.createBuffer()
    gl.bindBuffer(gl.ARRAY_BUFFER, color_buf)
    gl.bufferData(gl.ARRAY_BUFFER, to_byte_array(color_data), gl.STATIC_DRAW)

    // Create VAO
    vao := gl.createVertexArray()
    gl.bindVertexArray(vao)
    
    // Map pointers
    gl.enableVertexAttribArray(0)
    gl.bindBuffer(gl.ARRAY_BUFFER, vertex_buf)
    gl.vertexAttribPointer(0, 2, gl.FLOAT, false, sizeof Vec2, 0)

    gl.enableVertexAttribArray(1)
    gl.bindBuffer(gl.ARRAY_BUFFER, color_buf)
    gl.vertexAttribPointer(1, 4, gl.FLOAT, false, sizeof Color, 0)

    gl.bindVertexArray(-1)

    return vao
}

loop :: (_: js.Value, args: [] js.Value) -> js.Value {
    defer js.release_pooled_objects()

    gl.clearColor(0.1, 0.1, 0.1, 1)
    gl.clear(gl.COLOR_BUFFER_BIT)

    rotation := args[0]->as_float()->value_or(0) / 1000

    gl.useProgram(shader)
    gl.uniform1f(rotation_location, ~~rotation)

    gl.bindVertexArray(triangle_mesh)
    gl.drawArrays(gl.TRIANGLES, 0, 3)

    js.Value.Global->call("requestAnimationFrame", loop)

    return .Undefined
}




VERTEX_SOURCE :: """#version 300 es
layout(location = 0) in vec2 a_vertex;
layout(location = 1) in vec4 a_color;

uniform float u_rot;
out vec4 v_color;

void main() {
    vec2 pos = vec2(
        a_vertex.x * cos(u_rot) + a_vertex.y * sin(u_rot),
        a_vertex.y * cos(u_rot) - a_vertex.x * sin(u_rot)
    );
    gl_Position = vec4(pos, 0, 1);

    v_color = a_color;
}"""


FRAGMENT_SOURCE :: """#version 300 es
precision mediump float;

in vec4 v_color;

out vec4 fragColor;

void main() {
    fragColor = v_color;
}"""


to_byte_array :: macro (x: [] $T) -> [] u8 {
    return .{ ~~ x.data, sizeof(T) * x.count };
}

