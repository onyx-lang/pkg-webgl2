//+optional-semicolons

/*

    This program showcases the classic "rotating colored triangle" example.
    Since the WebGL 2 package is for low-level bindings to WebGL, there is
    a lot of code here. In practice, you will want to use or make a wrapper
    around this logic to not burden yourself with all of these details.

*/

#load "./../webgl2"

use core.js
use runtime.platform
use core.random
use core.math
use webgl2 {*}

start_time: u64
shader: GLProgram
triangle_mesh: GLint
rotation_location: GLUniformLocation

main :: () {
    logf(.Info, "Initializing")
    js.setup_default_pool()

    use glContext := create_context()
    glInit(glContext)

    shader = create_shader()->expect("Failed to create shader")
    triangle_mesh = create_triangle_mesh()
    rotation_location = glGetUniformLocation(shader, "u_rot")

    start_time = platform.__time()

    js.Global->set("ONYX", js.Onyx)
    js.Global->call("requestAnimationFrame", loop)
}

create_context :: () -> js.Value {
    use doc    := js.Global->get("document")
    use canvas := doc->call("createElement", "canvas")
    canvas->set("width", js.Global->get("innerWidth"))
    canvas->set("height", js.Global->get("innerHeight"))

    doc->get("body")->call("append", canvas)

    glContext := canvas->call("getContext", "webgl2")
    return glContext
}

create_shader :: () -> ? GLProgram {
    vertex_shader   := compile_shader(GL_VERTEX_SHADER, VERTEX_SOURCE)?
    fragment_shader := compile_shader(GL_FRAGMENT_SHADER, FRAGMENT_SOURCE)?

    program := glCreateProgram()
    glAttachShader(program, vertex_shader)
    glAttachShader(program, fragment_shader)
    glLinkProgram(program)

    if glGetProgramParameter(program, GL_LINK_STATUS) == 0 {
        logf(.Error, "Failed to link program.")
        js.Global->get("console")->call("log", glGetProgramInfoLog(program))
        return .None
    }

    return program
}

compile_shader :: (type: GLenum, source: str) -> ? GLShader {
    shader := glCreateShader(type)

    glShaderSource(shader, source)
    glCompileShader(shader)

    if glGetShaderParameter(shader, GL_COMPILE_STATUS) == 0 {
        logf(.Error, "Failed to compile shader.")
        js.Global->get("console")->call("log", glGetShaderInfoLog(shader))
        return .None
    }

    return shader
}

Vec2  :: [2] f32
Color :: [4] f32

create_triangle_mesh :: () -> GLuint {
    triangle_data := Vec2.[
        .[ 0, 0.75 ],
        .[ -0.5, -0.25 ],
        .[ 0.5, -0.25 ]
    ]

    color_data := Color.[
        .[ 1, 0, 0, 1 ],
        .[ 0, 1, 0, 1 ],
        .[ 0, 0, 1, 1 ],
    ]

    // Create VBO for verticies
    vertex_buf := glCreateBuffer()
    glBindBuffer(GL_ARRAY_BUFFER, vertex_buf)
    glBufferData(GL_ARRAY_BUFFER, to_byte_array(triangle_data), GL_STATIC_DRAW)

    color_buf := glCreateBuffer()
    glBindBuffer(GL_ARRAY_BUFFER, color_buf)
    glBufferData(GL_ARRAY_BUFFER, to_byte_array(color_data), GL_STATIC_DRAW)

    // Create VAO
    vao := glCreateVertexArray()
    glBindVertexArray(vao)
    
    // Map pointers
    glEnableVertexAttribArray(0)
    glBindBuffer(GL_ARRAY_BUFFER, vertex_buf)
    glVertexAttribPointer(0, 2, GL_FLOAT, false, sizeof Vec2, 0)

    glEnableVertexAttribArray(1)
    glBindBuffer(GL_ARRAY_BUFFER, color_buf)
    glVertexAttribPointer(1, 4, GL_FLOAT, false, sizeof Color, 0)

    glBindVertexArray(-1)

    return vao
}

loop :: (_: js.Value, args: [] js.Value) -> js.Value {
    defer js.release_pooled_objects()

    glClearColor(0.1, 0.1, 0.1, 1)
    glClear(GL_COLOR_BUFFER_BIT)

    rotation := cast(f64) (platform.__time() - start_time) / 1000

    glUseProgram(shader)
    glUniform1f(rotation_location, ~~rotation)

    glBindVertexArray(triangle_mesh)
    glDrawArrays(GL_TRIANGLES, 0, 3)

    js.Global->call("requestAnimationFrame", loop)

    return js.Undefined
}




VERTEX_SOURCE :: """#version 300 es
layout(location = 0) in vec2 a_vertex;
layout(location = 1) in vec4 a_color;

uniform float u_rot;
out vec4 v_color;

void main() {
    vec2 pos = vec2(
        a_vertex.x * cos(u_rot) + a_vertex.y * sin(u_rot),
        a_vertex.y * cos(u_rot) - a_vertex.x * sin(u_rot)
    );
    gl_Position = vec4(pos, 0, 1);

    v_color = a_color;
}"""


FRAGMENT_SOURCE :: """#version 300 es
precision mediump float;

in vec4 v_color;

out vec4 fragColor;

void main() {
    fragColor = v_color;
}"""


to_byte_array :: macro (x: [] $T) -> [] u8 {
    return .{ ~~ x.data, (sizeof T) * x.count };
}

